{"version":3,"file":"static/js/Bid.01727d1f.chunk.js","mappings":"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","sources":["components/BidLoader/index.tsx","components/Buttons/ActionButton/index.tsx","components/FullBid/BidFooter/index.tsx","components/FullBid/BidInfoRaw/index.tsx","constants/bidStatuse.ts","constants/bidType.ts","components/FullBid/BookingBid/index.tsx","utils/formatDate.ts","components/FullBid/ViewingBid/index.tsx","components/FullBid/index.tsx","pages/BidPage.tsx","store/bids/thunks/fetchBidById.ts","utils/parseISO.ts"],"sourcesContent":["import React from 'react';\r\nimport CircleLoader from '../CircleLoader';\r\n\r\nimport './styles.scss';\r\n\r\nconst BidLoader: React.FC = () => {\r\n    return (\r\n        <div className='bid-loader'>\r\n            <CircleLoader />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BidLoader;","import React, { ButtonHTMLAttributes } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport cn from 'classnames';\r\n\r\nimport './styles.scss';\r\n\r\ninterface ActionButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    color: 'red' | 'yellow' | 'blue';\r\n    text: string;\r\n    to?: string;\r\n}\r\n\r\nconst ActionButton: React.FC<ActionButtonProps> = ({ color, text, to, className, ...props }) => {\r\n\r\n    return (\r\n        <>\r\n            {to ? (\r\n                    <Link \r\n                        to={to}\r\n                        className={cn('action-button', `action-button--${color}`, className)}\r\n                    >\r\n                        {text}\r\n                    </Link>\r\n                ) : (\r\n                    <button\r\n                        {...props}\r\n                        className={cn('action-button', `action-button--${color}`, className)}\r\n                    >\r\n                        {text}\r\n                    </button>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActionButton","import React from 'react'\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype BidFooterProps = {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst BidFooter: React.FC<BidFooterProps> = ({ children }) => {\r\n    return (\r\n        <footer className=\"bid-footer\">\r\n            {children}\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default BidFooter","import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype BidEditRawProps = {\r\n    rawName: string;\r\n    rawValue: string;\r\n    rawClassName?: string;\r\n}\r\n\r\nconst BidInfoRaw: React.FC<BidEditRawProps> = ({ rawName, rawValue, rawClassName }) => {\r\n    return (\r\n        <div className={cn('bid-info-raw', rawClassName)}>\r\n            <div className=\"bid-info-raw__name\">{rawName}</div>\r\n            <div className=\"bid-info-raw__value\">{rawValue}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BidInfoRaw;\r\n","export enum BID_STATUSE {\r\n    NEW = 'NEW',\r\n    COMPLETED = 'COMPLETED',\r\n    IN_WORK = 'IN_WORK'\r\n}\r\n\r\nexport const BID_STATUS_VALUES: { [key in BID_STATUSE]: string } = {\r\n    [BID_STATUSE.NEW]: 'Новая',\r\n    [BID_STATUSE.IN_WORK]: 'В работе',\r\n    [BID_STATUSE.COMPLETED]: 'Завершенная'\r\n}","export enum BID_TYPE {\r\n    BOOKING = 'BOOKING',\r\n    VIEWING = 'VIEWING'\r\n}\r\n\r\nexport const BID_TYPE_VALUE: { [key in BID_TYPE]: string } = {\r\n    [BID_TYPE.BOOKING]: 'Бронирование',\r\n    [BID_TYPE.VIEWING]: 'Просмотр'\r\n}\r\n","import React from \"react\";\r\nimport { IBookingBid } from \"../../../models/bid\";\r\nimport { BID_STATUS_VALUES } from \"../../../constants/bidStatuse\";\r\nimport { BID_TYPE_VALUE } from \"../../../constants/bidType\";\r\nimport { parseISO } from \"../../../utils/parseISO\";\r\nimport BidInfoRaw from \"../BidInfoRaw\";\r\nimport { formatDate } from \"../../../utils/formatDate\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst BookingBid: React.FC<IBookingBid> = (bid) => {\r\n    \r\n    const parsedDate = parseISO(bid.date);\r\n\r\n    return (\r\n        <>\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"ID:\"} rawValue={`Заявка №${bid.id}`} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Дата создания:\"} rawValue={`${parsedDate.day} ${parsedDate.time}`} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Услуга:\"} rawValue={BID_TYPE_VALUE[bid.type]} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Имя:\"} rawValue={bid.firstName} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Фамилия:\"} rawValue={bid.lastName} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Email:\"} rawValue={bid.email} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Телефон:\"} rawValue={bid.phone} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Дата рождения:\"} rawValue={formatDate(bid.birthdate)} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Статус заявки:\"} rawValue={BID_STATUS_VALUES[bid.status]} />\r\n            <BidInfoRaw rawClassName=\"booking-bid-raw\" rawName={\"Сообщение:\"} rawValue={bid.comment} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BookingBid;\r\n","export const formatDate = (date: string): string => {\r\n    const newDate = date.split(\"-\").reverse().join(\".\");\r\n    return newDate;\r\n};\r\n","import React from \"react\";\r\nimport { IBid } from \"../../../models/bid\";\r\nimport { BID_STATUS_VALUES } from \"../../../constants/bidStatuse\";\r\nimport { BID_TYPE_VALUE } from \"../../../constants/bidType\";\r\nimport { parseISO } from \"../../../utils/parseISO\";\r\nimport BidInfoRaw from \"../BidInfoRaw\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst ViewingBid: React.FC<IBid> = (bid) => {\r\n    const parsedDate = parseISO(bid.date);\r\n    return (\r\n        <>\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"ID:\"} rawValue={`Заявка №${bid.id}`} />\r\n            <BidInfoRaw\r\n                rawClassName=\"viewing-bid-raw\"\r\n                rawName={\"Дата создания:\"}\r\n                rawValue={`${parsedDate.day} ${parsedDate.time}`}\r\n            />\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"Услуга:\"} rawValue={BID_TYPE_VALUE[bid.type]} />\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"Имя:\"} rawValue={bid.firstName} />\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"Фамилия:\"} rawValue={bid.lastName} />\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"Email:\"} rawValue={bid.email} />\r\n            <BidInfoRaw rawClassName=\"viewing-bid-raw\" rawName={\"Телефон:\"} rawValue={bid.phone} />\r\n            <BidInfoRaw\r\n                rawClassName=\"viewing-bid-raw\"\r\n                rawName={\"Статус заявки:\"}\r\n                rawValue={BID_STATUS_VALUES[bid.status]}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewingBid;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BID_TYPE } from \"../../constants/bidType\";\r\nimport { IBid, IBookingBid } from \"../../models/bid\";\r\nimport BookingBid from \"./BookingBid\";\r\nimport ViewingBid from \"./ViewingBid\";\r\nimport ActionButton from \"../Buttons/ActionButton\";\r\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\r\nimport { deleteBid } from \"../../store/bids/thunks/deleteBid\";\r\nimport { showNotion } from \"../../utils/showNotion\";\r\nimport { NOTION } from \"../../constants/notion\";\r\nimport BidFooter from \"./BidFooter\";\r\n\r\ntype FullBidProps = IBid | IBookingBid;\r\n\r\nconst FullBid: React.FC<FullBidProps> = (bid) => {\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n\r\n    const handleDeleteBid = async () => {\r\n        setIsSubmitting(true);\r\n        try {\r\n            const response = await dispatch(deleteBid(bid.id as string)).unwrap();\r\n            showNotion(NOTION.SUCCESS, response.message);\r\n            navigate(-1);\r\n        } catch (error) {\r\n            const err = error as any;\r\n            showNotion(NOTION.ERROR, err.message);\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {bid.type === BID_TYPE.BOOKING && <BookingBid {...(bid as IBookingBid)} />}\r\n            {bid.type === BID_TYPE.VIEWING && <ViewingBid {...bid} />}\r\n            <BidFooter>\r\n                <ActionButton to={`/property-shop/bid/${bid.id}/edit`} color={\"blue\"} text={\"Редактировать\"} />\r\n                <ActionButton onClick={handleDeleteBid} disabled={isSubmitting} color={\"red\"} text={\"Удалить\"} />\r\n            </BidFooter>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FullBid;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Alert from \"../components/Alert\";\r\nimport FullBid from \"../components/FullBid\";\r\nimport { ALERT } from \"../constants/alertTypes\";\r\nimport { useAppDispatch } from \"../hooks/useAppDispatch\";\r\nimport { IBid, IBookingBid } from \"../models/bid\";\r\nimport { fetchBidById } from \"../store/bids/thunks/fetchBidById\";\r\nimport BidLoader from \"../components/BidLoader\";\r\n\r\nconst BidPage: React.FC = () => {\r\n\r\n    const { id = \"\" } = useParams();\r\n\r\n    const [bid, setBid] = React.useState<IBid | IBookingBid | null>(null);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n    const dispatch = useAppDispatch();\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        dispatch(fetchBidById(id))\r\n            .unwrap()\r\n            .then((data) => {\r\n                setBid(data);\r\n                setError(null);\r\n            })\r\n            .catch((error) => {\r\n                setBid(null);\r\n                setError(error.message);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }, [dispatch, id]);\r\n\r\n    return (\r\n        <>\r\n            {error && <Alert type={ALERT.ERROR} message={error} />}\r\n            {isLoading && <BidLoader />}\r\n            {!isLoading && bid && <FullBid {...bid} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BidPage;","import { createAppAsyncThunk } from \"../../createAppAsyncThunk\";\r\nimport { authApi } from \"../../../api\";\r\nimport { IBid, IBookingBid } from \"../../../models/bid\";\r\nimport { logoutUser } from \"../../user/userSlice\";\r\nimport { handleAuthError } from \"../../../utils/handleAuthError\";\r\n\r\nexport const fetchBidById = createAppAsyncThunk<IBid | IBookingBid, string>(\r\n    \"bids/fetchBidById\", async function (id, { rejectWithValue, dispatch }) {\r\n    try {\r\n        const response = await authApi.get<IBid | IBookingBid>(`bids/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        const { isAuthError, message } = handleAuthError(error);\r\n        if (isAuthError) dispatch(logoutUser());\r\n        return rejectWithValue({ message });\r\n    }\r\n});\r\n","type ParsedDate = {\r\n    day: string;\r\n    time: string;\r\n}\r\n\r\nexport const parseISO = (date: string): ParsedDate => {\r\n    let [day, time] = date.split('T');\r\n    day = day.split('-').reverse().join('.');\r\n    time = time.substring(0, 5);\r\n    return { day, time }\r\n}"],"names":["className","CircleLoader","color","text","to","props","cn","children","rawName","rawValue","rawClassName","BID_STATUSE","BID_STATUS_VALUES","NEW","IN_WORK","COMPLETED","BID_TYPE","BID_TYPE_VALUE","BOOKING","VIEWING","bid","date","parsedDate","parseISO","BidInfoRaw","id","day","time","type","firstName","lastName","email","phone","birthdate","split","reverse","join","status","comment","dispatch","useAppDispatch","navigate","useNavigate","React","isSubmitting","setIsSubmitting","handleDeleteBid","deleteBid","unwrap","response","showNotion","NOTION","message","err","BidFooter","ActionButton","onClick","disabled","useParams","setBid","isLoading","setIsLoading","error","setError","fetchBidById","then","data","catch","finally","Alert","ALERT","BidLoader","createAppAsyncThunk","rejectWithValue","authApi","handleAuthError","isAuthError","logoutUser","substring"],"sourceRoot":""}