{"version":3,"file":"static/js/Product.bb297472.chunk.js","mappings":"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","sources":["components/Buttons/ActionButton/index.tsx","components/FormElements/FormErrorMessage/index.tsx","constants/bidStatuse.ts","constants/bidType.ts","constants/regExp.ts","constants/httpStatuses.ts","components/FormElements/Textarea/index.tsx","components/Booking/BookingForm/bookingScheme.ts","components/Booking/BookingForm/index.tsx","components/FormsResult.tsx/index.tsx","components/Booking/index.tsx","components/Viewing/ViewingForm/viewingScheme.ts","components/Viewing/ViewingForm/index.tsx","components/Viewing/index.tsx","store/products/thunks/fetchProductById.ts","components/Buttons/PreviewButton/index.tsx","components/Buttons/BackButton/index.tsx","components/ProductDetails/index.tsx","components/ProductDetails/ProductDetailsItem/index.tsx","components/FullProduct/index.tsx","pages/ProductPage.tsx"],"sourcesContent":["import React, { ButtonHTMLAttributes } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport cn from 'classnames';\r\n\r\nimport './styles.scss';\r\n\r\ninterface ActionButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    color: 'red' | 'yellow' | 'blue';\r\n    text: string;\r\n    to?: string;\r\n}\r\n\r\nconst ActionButton: React.FC<ActionButtonProps> = ({ color, text, to, className, ...props }) => {\r\n\r\n    return (\r\n        <>\r\n            {to ? (\r\n                    <Link \r\n                        to={to}\r\n                        className={cn('action-button', `action-button--${color}`, className)}\r\n                    >\r\n                        {text}\r\n                    </Link>\r\n                ) : (\r\n                    <button\r\n                        {...props}\r\n                        className={cn('action-button', `action-button--${color}`, className)}\r\n                    >\r\n                        {text}\r\n                    </button>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActionButton","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype FormErrorMessageProps = {\r\n    text: string;\r\n};\r\n\r\nconst FormErrorMessage: React.FC<FormErrorMessageProps> = ({ text }) => {\r\n    return <p className=\"form-error-message\">{text}</p>;\r\n};\r\n\r\nexport default FormErrorMessage;\r\n","export enum BID_STATUSE {\r\n    NEW = 'NEW',\r\n    COMPLETED = 'COMPLETED',\r\n    IN_WORK = 'IN_WORK'\r\n}\r\n\r\nexport const BID_STATUS_VALUES: { [key in BID_STATUSE]: string } = {\r\n    [BID_STATUSE.NEW]: 'Новая',\r\n    [BID_STATUSE.IN_WORK]: 'В работе',\r\n    [BID_STATUSE.COMPLETED]: 'Завершенная'\r\n}","export enum BID_TYPE {\r\n    BOOKING = 'BOOKING',\r\n    VIEWING = 'VIEWING'\r\n}\r\n\r\nexport const BID_TYPE_VALUE: { [key in BID_TYPE]: string } = {\r\n    [BID_TYPE.BOOKING]: 'Бронирование',\r\n    [BID_TYPE.VIEWING]: 'Просмотр'\r\n}\r\n","export const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;","export enum HTTP_STATUS {\r\n    IDLE = 'IDLE',   \r\n    PENDING = 'LOADING',\r\n    RESOLVED = 'SUCCESS',\r\n    REJECTED = 'FAIL'\r\n}","import React, { TextareaHTMLAttributes } from 'react'\r\n\r\nimport './styles.scss';\r\n\r\ntype TextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement>;\r\n\r\nconst Textarea: React.FC<TextareaProps> = ({ className = '', ...rest }) => {\r\n    return (\r\n        <textarea {...rest} className={`textarea ${className}`}></textarea>\r\n    )\r\n}\r\n\r\nexport default Textarea","import * as Yup from \"yup\";\r\nimport { phoneRegExp } from \"../../../constants/regExp\";\r\n\r\nexport const bookingScheme = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .min(2, \"Минимальное количество символов: 2\")\r\n        .max(35, \"Превышено максимальное количество символов\")\r\n        .required(\"Обязательное поле\"),\r\n    lastName: Yup.string()\r\n        .min(2, \"Минимальное количество символов: 2\")\r\n        .max(35, \"Превышено максимальное количество символов\")\r\n        .required(\"Обязательное поле\"),\r\n    email: Yup.string()\r\n        .email(\"Не корректный email\")\r\n        .required(\"Обязательное поле\"),\r\n    phone: Yup.string()\r\n        .matches(phoneRegExp, \"Не корректный номер телефона\")\r\n        .required(\"Обязательное поле\"),\r\n    birthdate: Yup.date().required(\"Обязательное поле\"),\r\n    agreement: Yup.boolean().oneOf([true], \"Обязательное поле\"),\r\n});","import React from \"react\";\r\nimport { HTTP_STATUS } from \"../../../constants/httpStatuses\";\r\nimport { Formik } from \"formik\";\r\nimport { BID_STATUSE } from \"../../../constants/bidStatuse\";\r\nimport { BID_TYPE } from \"../../../constants/bidType\";\r\nimport { IBookingBid } from \"../../../models/bid\";\r\nimport { useAppDispatch } from \"../../../hooks/useAppDispatch\";\r\nimport { postBid } from \"../../../store/bids/thunks/postBid\";\r\nimport { BookingResult } from \"..\";\r\nimport TextInput from \"../../FormElements/TextInput\";\r\nimport OrderButton from \"../../Buttons/OrderButton\";\r\nimport Textarea from \"../../FormElements/Textarea\";\r\nimport { bookingScheme } from \"./bookingScheme\";\r\n\r\nimport \"./styles.scss\";\r\nimport FormErrorMessage from \"../../FormElements/FormErrorMessage\";\r\n\r\ntype BookingFormProps = {\r\n    setResult: React.Dispatch<React.SetStateAction<BookingResult>>;\r\n};\r\n\r\ninterface Values {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone: string;\r\n    birthdate: string;\r\n    agreement: boolean;\r\n    comment: string;\r\n}\r\n\r\nconst BookingForm: React.FC<BookingFormProps> = ({ setResult }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const initialState: Values = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        birthdate: \"\",\r\n        comment: \"\",\r\n        agreement: false,\r\n    };\r\n\r\n    const handleSubmit = async (values: Values) => {\r\n        \r\n        const bid: IBookingBid = {\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            birthdate: values.birthdate,\r\n            phone: values.phone,\r\n            email: values.email,\r\n            comment: values.comment,\r\n            status: BID_STATUSE.NEW,\r\n            type: BID_TYPE.BOOKING,\r\n            date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await dispatch(postBid(bid)).unwrap();\r\n            setResult({ status: HTTP_STATUS.RESOLVED, message: response.message });\r\n        } catch (error) {\r\n            const err = error as any;\r\n            setResult({ status: HTTP_STATUS.REJECTED, message: err?.message });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialState}\r\n            validationSchema={bookingScheme}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({ handleSubmit, handleChange, handleBlur, values, errors, touched, isSubmitting }) => (\r\n                <form onSubmit={handleSubmit} className=\"booking-form\">\r\n                    <div className=\"booking-form__input-group\">\r\n                        <label className=\"booking-form__label\">\r\n                            Имя*\r\n                            <TextInput\r\n                                type=\"text\"\r\n                                className=\"booking-form__input\"\r\n                                placeholder=\"Имя\"\r\n                                name=\"firstName\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.firstName}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.firstName && touched.firstName && <FormErrorMessage text={errors.firstName} />}\r\n                        </label>\r\n                        <label className=\"booking-form__label\">\r\n                            Фамилия*\r\n                            <TextInput\r\n                                type=\"text\"\r\n                                className=\"booking-form__input\"\r\n                                placeholder=\"Фамилия\"\r\n                                name=\"lastName\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.lastName}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.lastName && touched.lastName && <FormErrorMessage text={errors.lastName} />}\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"booking-form__input-group\">\r\n                        <label className=\"booking-form__label\">\r\n                            Телефон*\r\n                            <TextInput\r\n                                type=\"tel\"\r\n                                className=\"booking-form__input\"\r\n                                placeholder=\"Номер\"\r\n                                name=\"phone\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.phone}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.phone && touched.phone && (\r\n                                <FormErrorMessage text={errors.phone} />\r\n                            )}\r\n                        </label>\r\n                        <label className=\"booking-form__label\">\r\n                            Email*\r\n                            <TextInput\r\n                                type=\"email\"\r\n                                className=\"booking-form__input\"\r\n                                placeholder=\"Email\"\r\n                                name=\"email\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.email}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.email && touched.email && (\r\n                                <FormErrorMessage text={errors.email} />\r\n                            )}\r\n                        </label>\r\n                    </div>\r\n                    <label className=\"booking-form__label booking-form__label--thin\">\r\n                        Дата рождения*\r\n                        <TextInput\r\n                            type=\"date\"\r\n                            className=\"booking-form__input\"\r\n                            name=\"birthdate\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.birthdate}\r\n                            disabled={isSubmitting}\r\n                        />\r\n                        {errors.birthdate && touched.birthdate && (\r\n                            <FormErrorMessage text={errors.birthdate} />\r\n                        )}\r\n                    </label>\r\n                    <label className=\"booking-form__label label\">\r\n                        Комментарий\r\n                        <Textarea\r\n                            className=\"booking-form__textarea\"\r\n                            placeholder=\"Текст...\"\r\n                            name=\"comment\"\r\n                            onChange={handleChange}\r\n                            value={values.comment}\r\n                            disabled={isSubmitting}\r\n                        />\r\n                    </label>\r\n                    <label className=\"booking-form__agreement-label\">\r\n                        <TextInput\r\n                            type=\"checkbox\"\r\n                            className=\"booking-form__checkbox\"\r\n                            name=\"agreement\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={isSubmitting}\r\n                        />\r\n                        <span className=\"booking-form__agreement-text\">\r\n                            С политикой конфиденциальности ознакомлен и\r\n                            согласен.*\r\n                        </span>\r\n                        {errors.agreement && touched.agreement && (\r\n                            <FormErrorMessage text={errors.agreement} />\r\n                        )}\r\n                    </label>\r\n                    <OrderButton\r\n                        size={\"small\"}\r\n                        text={\"Отправить\"}\r\n                        className={\"booking-form__btn\"}\r\n                        type={\"submit\"}\r\n                        disabled={isSubmitting}\r\n                    />\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default BookingForm;\r\n","import React from \"react\";\r\nimport { HOME_ROUTE } from \"../../constants/routesPathNames\";\r\nimport { BookingResult } from \"../Booking\";\r\nimport { HTTP_STATUS } from \"../../constants/httpStatuses\";\r\nimport ActionButton from \"../Buttons/ActionButton\";\r\nimport successIconSrc from \"../../assets/img/icons/success-icon.png\";\r\nimport errorIconSrc from '../../assets/img/icons/error-icon.png';\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst FormsResult: React.FC<BookingResult> = ({ status, message }) => {\r\n\r\n    const isSuccess = status === HTTP_STATUS.RESOLVED;\r\n\r\n    return (\r\n        <section className=\"forms-result\">\r\n            <div className={`forms-result__content ${!isSuccess ? \"forms-result__content--error\" : \"\"}`}>\r\n                {isSuccess ? (\r\n                    <>\r\n                        <img className=\"forms-result__img\" src={successIconSrc} alt=\"Success\"/>\r\n                        <p className=\"forms-result__text\">{message}</p>\r\n                        <p className=\"forms-result__text\">Наши сотрудники через некоторое время с вами свяжутся.</p>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <img className=\"forms-result__img\" src={errorIconSrc} alt=\"Error\"/>\r\n                        <p className=\"forms-result__text\">{message}</p>\r\n                        <p className=\"forms-result__text\">Попробуйте снова через некоторое время.</p>\r\n                    </>\r\n                )}\r\n                <ActionButton to={HOME_ROUTE} text={'На главную'} color={'blue'} className={'forms-result__btn'} />\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default FormsResult;\r\n","import React from \"react\";\r\nimport { HTTP_STATUS } from \"../../constants/httpStatuses\";\r\nimport BookingForm from \"./BookingForm\";\r\nimport ObjectFormsResult from \"../FormsResult.tsx\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport type BookingResult = {\r\n    status: HTTP_STATUS;\r\n    message: string;\r\n};\r\n\r\nconst Booking: React.FC = () => {\r\n    \r\n    const [result, setResult] = React.useState<BookingResult>({\r\n        status: HTTP_STATUS.IDLE,\r\n        message: \"\",\r\n    });\r\n\r\n    return (\r\n        <section className=\"booking\">\r\n            <h4 className=\"booking__title\">Анкета бронирования</h4>\r\n            {result.status === HTTP_STATUS.IDLE ? <BookingForm setResult={setResult} /> : <ObjectFormsResult {...result} />}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Booking;\r\n","import * as Yup from \"yup\";\r\nimport { phoneRegExp } from \"../../../constants/regExp\";\r\n\r\nexport const viewingScheme = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .min(2, \"Минимальное количество символов: 2\")\r\n        .max(35, \"Превышено максимальное количество символов\")\r\n        .required(\"Обязательное поле\"),\r\n    lastName: Yup.string()\r\n        .min(2, \"Минимальное количество символов: 2\")\r\n        .max(35, \"Превышено максимальное количество символов\")\r\n        .required(\"Обязательное поле\"),\r\n    phone: Yup.string()\r\n        .matches(phoneRegExp, \"Не корректный номер телефона\")\r\n        .required(\"Обязательное поле\"),\r\n    email: Yup.string()\r\n        .email(\"Не корректный email\")\r\n        .required(\"Обязательное поле\"),\r\n});","import React from \"react\";\r\nimport { HTTP_STATUS } from \"../../../constants/httpStatuses\";\r\nimport { IBid } from \"../../../models/bid\";\r\nimport { Formik } from \"formik\";\r\nimport { useAppDispatch } from \"../../../hooks/useAppDispatch\";\r\nimport { BID_STATUSE } from \"../../../constants/bidStatuse\";\r\nimport { BID_TYPE } from \"../../../constants/bidType\";\r\nimport { postBid } from \"../../../store/bids/thunks/postBid\";\r\nimport { ViewingResult } from \"..\";\r\nimport { viewingScheme } from \"./viewingScheme\";\r\nimport TextInput from \"../../FormElements/TextInput\";\r\nimport OrderButton from \"../../Buttons/OrderButton\";\r\n\r\nimport \"./styles.scss\";\r\nimport FormErrorMessage from \"../../FormElements/FormErrorMessage\";\r\n\r\ntype ViewingFormProps = {\r\n    setResult: React.Dispatch<React.SetStateAction<ViewingResult>>;\r\n};\r\n\r\ninterface Values {\r\n    firstName: string;\r\n    lastName: string;\r\n    phone: string;\r\n    email: string;\r\n}\r\n\r\nconst ViewingForm: React.FC<ViewingFormProps> = ({ setResult }) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const initialValues: Values = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        email: \"\",\r\n    };\r\n\r\n    const handleSubmit = async (values: Values) => {\r\n\r\n        const bid: IBid = {\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            phone: values.phone,\r\n            email: values.email,\r\n            status: BID_STATUSE.NEW,\r\n            type: BID_TYPE.VIEWING,\r\n            date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await dispatch(postBid(bid)).unwrap();\r\n            setResult({ status: HTTP_STATUS.RESOLVED, message: response.message });\r\n        } catch (error) {\r\n            const err = error as any;\r\n            setResult({ status: HTTP_STATUS.REJECTED, message: err?.message });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={viewingScheme}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({ handleSubmit, handleChange, handleBlur, values, errors, touched, isSubmitting }) => (\r\n                <form onSubmit={handleSubmit} className=\"viewing-form\">\r\n                    <div className=\"viewing-form__input-group\">\r\n                        <label className=\"viewing-form__label\">\r\n                            Имя*\r\n                            <TextInput\r\n                                type=\"text\"\r\n                                className=\"viewing-form__input\"\r\n                                placeholder=\"Имя\"\r\n                                name=\"firstName\"\r\n                                onChange={handleChange}\r\n                                value={values.firstName}\r\n                                disabled={isSubmitting}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                            {errors.firstName && touched.firstName && <FormErrorMessage text={errors.firstName} />}\r\n                        </label>\r\n                        <label className=\"viewing-form__label\">\r\n                            Фамилия*\r\n                            <TextInput\r\n                                type=\"text\"\r\n                                className=\"viewing-form__input\"\r\n                                placeholder=\"Фамилия\"\r\n                                name=\"lastName\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.lastName}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.lastName && touched.lastName && <FormErrorMessage text={errors.lastName} />}\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"viewing-form__input-group\">\r\n                        <label className=\"viewing-form__label\">\r\n                            Телефон*\r\n                            <TextInput\r\n                                type=\"tel\"\r\n                                className=\"viewing-form__input\"\r\n                                placeholder=\"Номер\"\r\n                                name=\"phone\"\r\n                                onChange={handleChange}\r\n                                value={values.phone}\r\n                                disabled={isSubmitting}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                            {errors.phone && touched.phone && <FormErrorMessage text={errors.phone} />}\r\n                        </label>\r\n                        <label className=\"viewing-form__label\">\r\n                            Email*\r\n                            <TextInput\r\n                                type=\"email\"\r\n                                className=\"viewing-form__input\"\r\n                                placeholder=\"Email\"\r\n                                name=\"email\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.email}\r\n                                disabled={isSubmitting}\r\n                            />\r\n                            {errors.email && touched.email && <FormErrorMessage text={errors.email} />}\r\n                        </label>\r\n                    </div>\r\n                    <OrderButton\r\n                        size={\"small\"}\r\n                        type=\"submit\"\r\n                        className=\"viewing-form__btn\"\r\n                        disabled={isSubmitting}\r\n                        text={\"Отправить\"}\r\n                    />\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ViewingForm;\r\n","import React from \"react\";\r\nimport { HTTP_STATUS } from \"../../constants/httpStatuses\";\r\nimport FormsResult from \"../FormsResult.tsx\";\r\nimport ViewingForm from \"./ViewingForm\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport type ViewingResult = {\r\n    status: HTTP_STATUS;\r\n    message: string;\r\n};\r\n\r\nconst Viewing: React.FC = () => {\r\n    \r\n    const [result, setResult] = React.useState<ViewingResult>({\r\n        status: HTTP_STATUS.IDLE,\r\n        message: \"\",\r\n    });\r\n\r\n    return (\r\n        <section className=\"viewing\">\r\n            <h4 className=\"viewing__title\">Анкета просмотра</h4>\r\n            {result.status === HTTP_STATUS.IDLE ? <ViewingForm setResult={setResult} /> :  <FormsResult {...result} />}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Viewing;\r\n","import { createAppAsyncThunk } from \"../../createAppAsyncThunk\";\r\nimport { api } from \"../../../api\";\r\nimport { IProduct } from \"../../../models/products\";\r\nimport { handleDefaultError } from \"../../../utils/handleDefaultError\";\r\n\r\nexport const fetchProductById = createAppAsyncThunk<IProduct, string>(\r\n    \"products/fetchProductById\",\r\n    async function (id, { rejectWithValue }) {\r\n        try {\r\n            const response = await api.get<IProduct>(\"products/\" + id);\r\n            return response.data;\r\n        } catch (error) {\r\n            const message = handleDefaultError(error);\r\n            return rejectWithValue({ message });\r\n        }\r\n    }\r\n);\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport backIconSrc from '../../../assets/img/icons/return-icon.png';\r\nimport cn from \"classnames\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ninterface PreviewButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    text: string;\r\n    hasIcon?: boolean;\r\n}\r\n\r\nconst PreviewButton: React.FC<PreviewButtonProps> = ({ text, hasIcon = false, className, ...rest }) => {\r\n    return (\r\n        <button\r\n            {...rest}\r\n            className={cn(\r\n                \"preview-button\",\r\n                { \"preview-button--back\": hasIcon },\r\n                className\r\n            )}\r\n        >\r\n            {text}\r\n            {hasIcon && (\r\n                <img\r\n                    className=\"preview-button__img\"\r\n                    src={backIconSrc}\r\n                    alt=\"Back\"\r\n                />\r\n            )}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default PreviewButton;\r\n","import React, { ButtonHTMLAttributes } from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport './styles.scss';\r\n\r\ninterface BackButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    text: string;\r\n}\r\n\r\nconst BackButton: React.FC<BackButtonProps> = ({ text, className, ...rest }) => {\r\n    return (\r\n        <button {...rest} className={cn('back-button', className)}>{text}</button>\r\n    )\r\n}\r\n\r\nexport default BackButton","import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\ntype ProductDetailsProps = {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n};\r\n\r\nconst ProductDetails: React.FC<ProductDetailsProps> = ({ children, className }) => {\r\n    return <div className={cn(\"details\", className)}>{children}</div>;\r\n};\r\n\r\nexport default ProductDetails;\r\n","import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype ProductDetailsItemProps = {\r\n    name: string;\r\n    value: string;\r\n    valueClassName?: string;\r\n};\r\n\r\nconst ProductDetailsItem: React.FC<ProductDetailsItemProps> = ({ name, value, valueClassName }) => {\r\n    return (\r\n        <div className=\"details-item\">\r\n            <div className=\"details-item__name\">{name}</div>\r\n            <div className={cn(\"details-item__value\", valueClassName)}>{value}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetailsItem;","import React from \"react\";\r\nimport Booking from \"../Booking\";\r\nimport Viewing from \"../Viewing\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport formatNumber from \"../../utils/formatNumber\";\r\nimport PageLoader from \"../PageLoader\";\r\nimport { IProduct } from \"../../models/products\";\r\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\r\nimport { fetchProductById } from \"../../store/products/thunks/fetchProductById\";\r\nimport Alert from \"../Alert\";\r\nimport { ALERT } from \"../../constants/alertTypes\";\r\nimport PreviewButton from \"../Buttons/PreviewButton\";\r\nimport OrderButton from \"../Buttons/OrderButton\";\r\nimport BackButton from \"../Buttons/BackButton\";\r\nimport ImageWithLoader from \"../ImageWithLoader\";\r\nimport ProductsFavButton from \"../Products/ProductsFavButton\";\r\nimport ProductParams from \"../ProductParams\";\r\nimport ProductParamsItem from \"../ProductParams/ProductParamsItem\";\r\nimport ProductDetails from \"../ProductDetails\";\r\nimport ProductDetailsItem from \"../ProductDetails/ProductDetailsItem\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst SingleProduct: React.FC = () => {\r\n    const { id = \"\" } = useParams();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const [isBooking, setIsBooking] = React.useState<boolean>(false);\r\n    const [isViewing, setIsViewing] = React.useState<boolean>(false);\r\n\r\n    const [product, setProduct] = React.useState<IProduct>({} as IProduct);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        dispatch(fetchProductById(id))\r\n            .unwrap()\r\n            .then((data) => {\r\n                setProduct(data);\r\n                setError(null);\r\n            })\r\n            .catch((error) => {\r\n                setProduct({} as IProduct);\r\n                setError(error.message);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }, [dispatch, id]);\r\n\r\n    if (isLoading) return <PageLoader />;\r\n\r\n    return (\r\n        <section className=\"full-product\">\r\n            {error && <Alert type={ALERT.ERROR} message={error} />}\r\n            {!error && (\r\n                <div className=\"full-product__body\">\r\n                    <div className=\"full-product__content\">\r\n                        {isBooking && <Booking />}\r\n                        {isViewing && <Viewing />}\r\n                        {!isBooking && !isViewing && (\r\n                            <ImageWithLoader\r\n                                src={`/property-shop/img/products/${product.image}`}\r\n                                imageClassName=\"full-product__img\"\r\n                                imageWrapperClassname=\"full-product__photo-wrapper\"\r\n                                alt=\"Product\"\r\n                                size={25}\r\n                            />\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"full-product__desc\">\r\n                        <div className=\"full-product__desc-sector\">ЖК {product.complex_name}</div>\r\n\r\n                        <div className=\"full-product__desc-name\">\r\n                            <h5 className=\"full-product__desc-title\">\r\n                                {product.title}, {product.square} м2\r\n                            </h5>\r\n                            <div className=\"full-product__desc-art\">{product.scu}</div>\r\n                            {product && <ProductsFavButton product={product} visualType=\"button\" />}\r\n                        </div>\r\n\r\n                        <div className=\"full-product__desc-details\">\r\n                            <ProductParams>\r\n                                <ProductParamsItem definition=\"Корпус\" value={product.building} />\r\n                                <ProductParamsItem definition=\"Этаж\" value={product.floor} />\r\n                                <ProductParamsItem definition=\"Номер\" value={product.flat_number} />\r\n                                <ProductParamsItem definition=\"Комнат\" value={product.rooms} />\r\n                            </ProductParams>\r\n                        </div>\r\n\r\n                        {/* <div className=\"full-product__details details\">\r\n                            <div className=\"details__row\">\r\n                                <div className=\"details__name\">Стоимость</div>\r\n                                <div className=\"details__value details__value--price\">\r\n                                    {formatNumber(Number(product.price_total))} ₽\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"details__row\">\r\n                                <div className=\"details__name\">Цена за м2</div>\r\n                                <div className=\"details__value\">{formatNumber(Number(product.price_sq_m))} ₽/м2</div>\r\n                            </div>\r\n                            <div className=\"details__row\">\r\n                                <div className=\"details__name\">Площадь</div>\r\n                                <div className=\"details__value\">{product.square} м2</div>\r\n                            </div>\r\n                        </div> */}\r\n                        <ProductDetails className=\"full-product__details\">\r\n                            <ProductDetailsItem\r\n                                name=\"Стоимость\"\r\n                                value={`${formatNumber(Number(product.price_total))} ₽`}\r\n                                valueClassName=\"full-product__details-price\"\r\n                            />\r\n                            <ProductDetailsItem\r\n                                name=\"Цена за м2\"\r\n                                value={`${formatNumber(Number(product.price_sq_m))} ₽/м2`}\r\n                            />\r\n                            <ProductDetailsItem name=\"Площадь\" value={`${product.square} м2`} />\r\n                        </ProductDetails>\r\n\r\n                        {isBooking || isViewing ? (\r\n                            <PreviewButton\r\n                                text={\"Обратно к просмотру\"}\r\n                                onClick={() => {\r\n                                    setIsBooking(false);\r\n                                    setIsViewing(false);\r\n                                }}\r\n                                className={\"full-product__preview-btn\"}\r\n                                hasIcon={true}\r\n                            ></PreviewButton>\r\n                        ) : (\r\n                            <div className=\"full-product__actions\">\r\n                                <OrderButton\r\n                                    text={\"Забронировать\"}\r\n                                    className={\"full-product__order-btn\"}\r\n                                    onClick={() => setIsBooking(true)}\r\n                                />\r\n                                <PreviewButton\r\n                                    text={\"Записаться на просмотр\"}\r\n                                    className={\"full-product__preview-btn\"}\r\n                                    onClick={() => setIsViewing(true)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <BackButton\r\n                text={\"← Вернуться к результатам поиска\"}\r\n                className=\"full-product__back-btn\"\r\n                onClick={() => navigate(-1)}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SingleProduct;\r\n","import React from \"react\";\r\nimport Container from \"../components/Container\";\r\nimport SingleProduct from \"../components/FullProduct\";\r\n\r\nconst ProductPage: React.FC = () => {\r\n    return (\r\n        <main className=\"main\">\r\n            <Container>\r\n                <SingleProduct />\r\n            </Container>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default ProductPage;\r\n"],"names":["color","text","to","className","props","cn","BID_STATUSE","BID_STATUS_VALUES","NEW","IN_WORK","COMPLETED","BID_TYPE","BID_TYPE_VALUE","BOOKING","VIEWING","phoneRegExp","HTTP_STATUS","rest","bookingScheme","Yup","shape","firstName","min","max","required","lastName","email","phone","matches","birthdate","agreement","oneOf","setResult","dispatch","useAppDispatch","handleSubmit","values","bid","comment","status","type","date","Date","toISOString","postBid","unwrap","response","RESOLVED","message","err","REJECTED","initialValues","validationSchema","onSubmit","handleChange","handleBlur","errors","touched","isSubmitting","TextInput","placeholder","name","onChange","onBlur","value","disabled","FormErrorMessage","OrderButton","size","isSuccess","src","alt","errorIconSrc","ActionButton","HOME_ROUTE","React","IDLE","result","viewingScheme","fetchProductById","createAppAsyncThunk","id","rejectWithValue","api","data","handleDefaultError","hasIcon","children","valueClassName","useParams","navigate","useNavigate","isBooking","setIsBooking","isViewing","setIsViewing","product","setProduct","isLoading","setIsLoading","error","setError","then","catch","finally","PageLoader","Alert","ALERT","ImageWithLoader","image","imageClassName","imageWrapperClassname","complex_name","title","square","scu","ProductsFavButton","visualType","ProductParams","ProductParamsItem","definition","building","floor","flat_number","rooms","formatNumber","Number","price_total","price_sq_m","onClick","Container"],"sourceRoot":""}